#!/bin/bash
# Derived from raspi-config https://github.com/RPi-Distro/raspi-config
#
# See LICENSE file for copyright and license details

ASK_TO_REBOOT=0
CMDLINE=/proc/cmdline
VERSION=1.2

export NEWT_COLORS='
actbutton=black,green
actcheckbox=black,green
actlistbox=black,green
actsellistbox=black,green
sellistbox=green,black
acttextbox=black,green
checkbox=,green
disabledentry=green,
emptyscale=green
entry=,green
helpline=,green
label=green,
root=,green
roottext=,green
title=black,
button=green,black
'

USER=${SUDO_USER:-$(whoami)}

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=18
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_about() {
  whiptail  --title "OctoBox Software Configuration Tool (octobox-setup $VERSION)" --msgbox "\
This tool provides a straightforward way of doing initial
configuration of the OctoBox.  It can be run at any time
to revise the configuration.

Script version: $VERSION
" 20 70 1
  return 0
}

do_change_pass() {
  whiptail --msgbox "You will now be asked to enter a new password for the user: $USER" 20 60 1
  passwd $USER &&
  whiptail --msgbox "Password changed successfully" 20 60 1
}

do_configure_keyboard() {
  printf "Reloading keymap. This may take a short while\n"
  dpkg-reconfigure keyboard-configuration
  invoke-rc.d keyboard-setup start
  setsid sh -c 'exec setupcon -k --force <> /dev/tty1 >&0 2>&1'
  udevadm trigger --subsystem-match=input --action=change
  return 0
}

do_change_locale() {
  dpkg-reconfigure locales
}

do_change_timezone() {
  dpkg-reconfigure tzdata
}

do_wifi_country() {
  # The wpi_cli commands from raspi-config don't work on Ubuntu.
  # No matter what I tried, the save_config command failed.  Even
  # after specifying the correct config file with:
  #
  #  update_config=1
  #
  # Since I don't ship the OctoBox outside the US, I've just disabled
  # this for now.

  whiptail --msgbox "Changing Wireless Country not supported" 20 60
  return 1

  IFACE="$(list_wlan_interfaces | head -n 1)"
  if [ -z "$IFACE" ]; then
    whiptail --msgbox "No wireless interface found" 20 60
    return 1
  fi

  if ! wpa_cli -i "$IFACE" status > /dev/null 2>&1; then
    whiptail --msgbox "Could not communicate with wpa_supplicant" 20 60
    return 1
  fi

  oIFS="$IFS"
  value=$(cat /usr/share/zoneinfo/iso3166.tab | tail -n +26 | tr '\t' '/' | tr '\n' '/')
  IFS="/"
  COUNTRY=$(whiptail --menu "Select the country in which the OctoBox is to be used" 20 60 10 ${value} 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ];then
    wpa_cli -i "$IFACE" set country "$COUNTRY"
    wpa_cli -i "$IFACE" save_config > /dev/null 2>&1
    if iw reg set "$COUNTRY" 2> /dev/null; then
      ASK_TO_REBOOT=1
    fi
    if hash rfkill 2> /dev/null; then
      rfkill unblock wifi
    fi
    whiptail --msgbox "Wireless LAN country set to $COUNTRY" 20 60 1
  fi
  IFS=$oIFS
}

do_hostname() {
  whiptail  --title "OctoBox Software Configuration Tool (octobox-setup $VERSION)" --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1
  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  NEW_HOSTNAME=$(whiptail  --title "OctoBox Software Configuration Tool (octobox-setup $VERSION)" --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}

get_boot_cli() {
  if [ "$(systemctl get-default)" = graphical.target ]; then
    echo 1
  else
    echo 0
  fi
}

get_autologin() {
  if [ $(get_boot_cli) -eq 0 ]; then
    # booting to CLI
    if [ -e /etc/systemd/system/getty@tty1.service.d/autologin.conf ] ; then
      echo 0
    else
      echo 1
    fi
  else
    # booting to desktop - check the autologin for gdm3
    if grep -q "^AutomaticLoginEnable=true" /etc/gdm3/custom.conf; then
      echo 0
    else
      echo 1
    fi
  fi
}

do_boot_behaviour() {
  BOOTOPT=$(whiptail --title "OctoBox Software Configuration Tool (octobox-setup $VERSION)" --menu "Boot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
      "B1 Console" "Text console, requiring user to login" \
      "B2 Console Autologin" "Text console, automatically logged in as '$USER' user" \
      "B3 Desktop" "Desktop GUI, requiring user to login" \
      "B4 Desktop Autologin" "Desktop GUI, automatically logged in as '$USER' user" \
      3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$BOOTOPT" in
      B1*)
        systemctl --quiet set-default multi-user.target
        rm -f /etc/systemd/system/getty@tty1.service.d/autologin.conf
        ;;
      B2*)
        systemctl --quiet set-default multi-user.target
        mkdir -p /etc/systemd/system/getty@tty1.service.d
        cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $USER --noclear %I \$TERM
EOF
        ;;
      B3*)
        systemctl --quiet set-default graphical.target
        rm -f /etc/systemd/system/getty@tty1.service.d/autologin.conf
        sed /etc/gdm3/custom.conf -i -e "s/^AutomaticLoginEnable/#AutomaticLoginEnable/"
        ;;
      B4*)
        systemctl --quiet set-default graphical.target
        cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $USER --noclear %I \$TERM
EOF
        sed /etc/gdm3/custom.conf -i -e "s/^\(#\|\)AutomaticLoginEnable=.*/AutomaticLoginEnable=true/"
        sed /etc/gdm3/custom.conf -i -e "s/^\(#\|\)AutomaticLogin=.*/AutomaticLogin=$USER/"
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised boot option" 20 60 2
        return 1
        ;;
    esac
    systemctl daemon-reload
    ASK_TO_REBOOT=1
  fi
}

list_wlan_interfaces() {
  for dir in /sys/class/net/*/wireless; do
    if [ -d "$dir" ]; then
      basename "$(dirname "$dir")"
    fi
  done
}

get_SSID() {
  menuArgs=('"Enter Manually"' '"  "')
  while IFS=":" read -r key value
  do
    menuArgs+=("\"$key\"" "$value")
  done < "/tmp/SSIDs.txt"

  #rm /tmp/SSIDs.txt

  c="whiptail --title 'OctoBox Software Configuration Tool (octobox-setup $VERSION)' --menu 'Select Wireless Network' 19 60 10 ${menuArgs[@]} 3>&1 1>&2 2>&3"
  eval $c
}

list_wlan_interfaces() {
  for dir in /sys/class/net/*/wireless; do
    if [ -d "$dir" ]; then
      basename "$(dirname "$dir")"
    fi
  done
}

do_connect() {
  # Escape special characters for embedding in regex below
  ssid="$(echo "$SSID" \
   | sed 's;\\;\\\\;g' \
   | sed -e 's;\.;\\\.;g' \
	 -e 's;\*;\\\*;g' \
	 -e 's;\+;\\\+;g' \
	 -e 's;\?;\\\?;g' \
	 -e 's;\^;\\\^;g' \
	 -e 's;\$;\\\$;g' \
	 -e 's;\/;\\\/;g' \
	 -e 's;\[;\\\[;g' \
	 -e 's;\];\\\];g' \
	 -e "s;';\\\';g"  \
	 -e 's; ;\\ ;g'   \
	 -e 's;{;\\{;g'   \
	 -e 's;};\\};g'   \
	 -e 's;(;\\(;g'   \
	 -e 's;);\\);g'   \
	 -e 's;";\\\\\";g')"

  nmcliArgs=("$ssid" "password" "\"$PASSPHRASE\"")
  cmd="nmcli dev wifi connect ${nmcliArgs[@]}"
  eval $cmd
}

do_wifi_ssid_passphrase() {
  RET=0
  IFACE_LIST="$(list_wlan_interfaces)"
  IFACE="$(echo "$IFACE_LIST" | head -n 1)"

  if [ -z "$IFACE" ]; then
    whiptail --msgbox "No wireless interface found" 20 60
    return 1
  fi

  nmcli --terse --fields SSID,SIGNAL dev wifi | grep -v 'SSID' | grep -v - '--' | grep -v '^:' | sort -u -t: -k1,1 > /tmp/SSIDs.txt &

  i=1
  while (true)
  do
    proc=$(ps aux | grep -v grep | grep -e "nmcli")
    sleep 0.1
    echo $i
    i=$((i+1))
    if [ "$proc" = "" ]; then break; fi
  done | whiptail  --title "OctoBox Software Configuration Tool (octobox-setup $VERSION)" --gauge "Searching for WiFi (% complete is an estimate)" 20 60 10

  #TODO: Add checks for failures
  SSID=$(get_SSID)

  echo "Back from get_SSID: SSID=$SSID"

  if [ "$SSID" = "Enter Manually" ]; then
    SSID=$(whiptail --inputbox "Enter WiFi SSID" 20 60 --title "Enter SSID" 3>&1 1>&2 2>&3)
  fi

  while [ -z "$PASSPHRASE" ]; do
    PASSPHRASE=$(whiptail --passwordbox "Please enter passphrase." 20 60 3>&1 1>&2 2>&3)
    if [ $? -ne 0 ]; then
      return 0
    else
      break
    fi
  done

  result=$(do_connect)
  if [[ $result =~ "successfully activated" ]]; then
    #TODO: run as subcommand and check success
    dhclient wlp2s0
  else
    return 1
  fi
}

do_finish() {
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

do_internationalisation_menu() {
  FUN=$(whiptail --title "Software Configuration Tool (raspi-config)" --menu "Localisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "L1 Locale" "Configure language and regional settings" \
    "L2 Timezone" "Configure time zone" \
    "L3 Keyboard" "Set keyboard layout to match your keyboard" \
    "L4 WLAN Country" "Set legal wireless channels for your country" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      L1\ *) do_change_locale ;;
      L2\ *) do_change_timezone ;;
      L3\ *) do_configure_keyboard ;;
      L4\ *) do_wifi_country ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_software_update() {
  cd /tmp
  git clone https://github.com/tquiggle/OctoBox
  cd /tmp/OctoBox/slash

  for src in $(find . -type f); do
     dst=`echo $src | sed -e 's/^.//'`
     echo "$src -> $dst"
     install -C $src $dst
  done
}

do_script_update() {
  wget -O /tmp/octobox-setup https://raw.githubusercontent.com/tquiggle/OctoBox/main/slash/usr/bin/octobox-setup
  if [ ! -f /tmp/octobox-setup ]; then
    whiptail --msgbox "Unable to download latest octobox-setup" 20 60 1
    return -1
  fi
  LATEST_VERSION=`grep "VERSION=" /tmp/octobox-setup | sed -e 's/VERSION=//'`
  if [ "$VERSION" = "$LATEST_VERSION" ]; then
    whiptail --msgbox "Latest octobox-setup already installed" 20 60 1
    return 0
  fi
  install -C /tmp/octobox-setup /usr/bin/octobox-setup
  whiptail --msgbox "octobox-setup upgraded to version $LATEST_VERSION" 20 60 1
  exec /usr/bin/octobox-setup
}

do_framerate() {
  FRAMERATE=`grep FRAMERATE  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`
  RESOLUTION=`grep RESOLUTION  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`
  DEVICE=`grep DEVICE  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`

  FRAMERATE=$(whiptail --inputbox "Enter frame rate (current=$FRAMERATE)" 20 60 --title "Enter Framerate" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ] && [ "$FRAMERATE" != "" ]; then

    cat > /usr/local/etc/mjpg_streamer.conf << EOF
LD_LIBRARY_PATH=/usr/local/lib/mjpg-streamer
FRAMERATE=$FRAMERATE
RESOLUTION=$RESOLUTION
DEVICE=$DEVICE
INPUT="\"input_uvc.so -d $DEVICE -f $FRAMERATE -r $RESOLUTION\""
OUTPUT="\"output_http.so --www /usr/local/share/mjpg-streamer/www\""
EOF

    systemctl restart mjpg_streamer
  fi
}

do_resolution() {
  FRAMERATE=`grep FRAMERATE  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`
  RESOLUTION=`grep RESOLUTION  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`
  DEVICE=`grep DEVICE  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`

  RESOLUTION=$(whiptail --inputbox "Enter camera resolution(current=$RESOLUTION)" 20 60 --title "Enter Resolution" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ] && [ "$RESOLUTION" != "" ]; then

    cat > /usr/local/etc/mjpg_streamer.conf << EOF
LD_LIBRARY_PATH=/usr/local/lib/mjpg-streamer
FRAMERATE=$FRAMERATE
RESOLUTION=$RESOLUTION
DEVICE=$DEVICE
INPUT="\"input_uvc.so -d $DEVICE -f $FRAMERATE -r $RESOLUTION\""
OUTPUT="\"output_http.so --www /usr/local/share/mjpg-streamer/www\""
EOF

    systemctl restart mjpg_streamer
  fi
}

do_device() {
  FRAMERATE=`grep FRAMERATE  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`
  RESOLUTION=`grep RESOLUTION  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`
  DEVICE=`grep DEVICE  /usr/local/etc/mjpg_streamer.conf | sed -e 's/^.*=//'`

  DEVICE=$(whiptail --inputbox "Enter camera device name(current=$DEVICE)" 20 60 --title "Enter Device" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ] && [ "$DEVICE" != "" ]; then

    cat > /usr/local/etc/mjpg_streamer.conf << EOF
LD_LIBRARY_PATH=/usr/local/lib/mjpg-streamer
FRAMERATE=$FRAMERATE
RESOLUTION=$RESOLUTION
DEVICE=$DEVICE
INPUT="\"input_uvc.so -d $DEVICE -f $FRAMERATE -r $RESOLUTION\""
OUTPUT="\"output_http.so --www /usr/local/share/mjpg-streamer/www\""
EOF

    systemctl restart mjpg_streamer
  fi
}

do_camera() {
  FUN=$(whiptail --title "OctoBox Software Configuration Tool (octobox-setup $VERSION)" --menu "Camera Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
      "C1 Enable camera" "Enable camera service (mjpg_streamer)" \
      "C2 Disable camera" "Disable camera service (mjpg_streamer)" \
      "C3 Frame Rate" "Set Camera Frame Rate" \
      "C4 Rsolution" "Set Camera Resolution" \
      "C5 Device" "Set Camera device name" \
      3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$FUN" in
      C1*)
        systemctl enable mjpg_streamer
	systemctl daemon-reload
        systemctl start mjpg_streamer
	whiptail --msgbox "mjpg_streamer service enabled" 20 60 1
        ;;
      C2*)
        systemctl stop mjpg_streamer
        systemctl disable mjpg_streamer
	systemctl daemon-reload
	whiptail --msgbox "mjpg_streamer service disabled" 20 60 1
        ;;
      C3*)
        do_framerate
        ;;
      C4*)
        do_resolution
        ;;
      C5*)
        do_device
        ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_update() {
  FUN=$(whiptail --title "OctoBox Software Configuration Tool (octobox-setup $VERSION)" --menu "Update Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
      "U1 Script" "Update just this octobox-setup script" \
      "U2 Software" "Update all OctoBox configuration software" \
      3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$FUN" in
      U1*)
        do_script_update
        ;;
      U2*)
        do_software_update
        ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

calc_wt_size
while [ "$USER" = "root" ] || [ -z "$USER" ]; do
  if ! USER=$(whiptail --inputbox "octobox-setup could not determine the default user.\\n\\nWhat user should these settings apply to?" 20 60 pi 3>&1 1>&2 2>&3); then
    return 0
  fi
done
while true; do
    FUN=$(whiptail --title "OctoBox Configuration Tool (octobox-setup $VERSION)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
  "1 Configure Wireless" "Configure wireless settings" \
  "2 Desktop / Auto Login" "Select boot into desktop or to command line" \
  "3 Hostname" "Set network name for this computer" \
  "4 Location and Language" "Set location and language preferences" \
  "5 Change Password" "Change password for user 'ocho'" \
  "6 Configure Camera" "Enable mjpg_streamer and configure camera" \
  "7 Update octobox-setup" "Update this tool to the latest version" \
  "8 About octobox-setup" "Information about this configuration tool" \
  3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_wifi_ssid_passphrase ;;
      2\ *) do_boot_behaviour ;;
      3\ *) do_hostname ;;
      4\ *) do_internationalisation_menu ;;
      5\ *) do_change_pass ;;
      6\ *) do_camera ;;
      7\ *) do_update ;;
      8\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done

# vim: expandtab: sw=2
